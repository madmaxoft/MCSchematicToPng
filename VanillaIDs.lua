
-- VanillaIDs.lua

--[[
This script takes in the vanilla_ids.json file that is used by the Minutor project
( https://github.com/mrkite/minutor/blob/master/definitions/vanilla_ids.json )
and converts the file to a Lua representation, then loads the file and uses it to
generate the src/BlockColors.cpp file.
--]]





--- Converts the text color representation ("#rrggbb" hex) into a png::rgba_pixel() constructor call
-- Returns a string in the form "rgba_pixel(<red>, <green>, <blue>, <alpha>)"
local function colorToPngPixel(a_Color, a_Alpha)
	a_Color = string.lower(a_Color):sub(2, 7)
	a_Alpha = tonumber(a_Alpha)
	if (string.len(a_Color) ~= 6) then
		print("Bad color format: '" .. a_Color .. "'.")
	end
	local res = a_Color:gsub("(..)", "0x%1, ")
	return "rgba_pixel(" .. res .. "0x" .. string.format("%02x", 255 - a_Alpha * 255) .. ")"
end





-- Load the vanilla_ids.json file:
local jsonfile = assert(io.open("vanilla_ids.json", "r"))
local json = jsonfile:read("*all")
jsonfile:close()

-- Convert the json to lua:
json = "return " .. json:gsub("%[", "{"):gsub("%]", "}"):gsub(" \"([^%s]*)\"%s*:", " [\"%1\"] =")

--[[
-- DEBUG: save into file:
local luafile = assert(io.open("vanilla_ids.lua", "w"))
luafile:write(json)
luafile:close()
--]]

-- Load as lua script:
local defs = assert(loadstring(json))()
local blockData = defs.data

-- Convert the array structures into maps:
local blocks = {}
for _, block in ipairs(blockData) do
	if (block.id) then
		blocks[block.id] = block
		local variants = block.variants
		if (variants) then
			local variantsMap = {}
			for _, variant in ipairs(variants) do
				if (variant.data) then
					variantsMap[variant.data] = variant
				else
					print("Unknown variant in block ID " .. block.id)
				end
			end  -- for variant - variants[]
			block.metaMap = variantsMap
		end  -- if (variants)
	else
		print("Unknown part")
	end
end

-- Create C++ code:
local cpp = {[[

// BlockColors.cpp

// Defines the block colors table

// NOTE: This file has been auto-generated by the VanillaIDs.lua script.
// Changes to this file will be overwritten upon the next re-generation of this file.

#include "Globals.h"
#include "BlockColors.h"




using namespace png;





rgba_pixel g_BlockColors[256][16] = {
]]}
local ins = table.insert
for blockType = 0, 255 do
	ins(cpp, "\t/* ")
	ins(cpp, string.format("%3d", blockType))
	ins(cpp, " */ {")
	local values = {}
	local block = blocks[blockType]
	if not(block) then
		-- Block is not present in the map, use dummy values:
		for blockMeta = 0, 15 do
			ins(values, "rgba_pixel(0xff, 0x00, 0xff, 0xff)")
		end
	else
		for blockMeta = 0, 15 do
			local color = block.color
			local alpha = block.alpha
			if (block.metaMap and block.metaMap[blockMeta]) then
				if (block.metaMap[blockMeta].color) then
					color = block.metaMap[blockMeta].color
				end
				if (block.metaMap[blockMeta].alpha) then
					alpha = block.metaMap[blockMeta].alpha
				end
			end
			if (color == nil) then
				-- Special case with air - it doesn't have its color specified
				color = "#000000"
			end
			ins(values, colorToPngPixel(color, alpha or 0))
		end  -- for blockMeta
	end
	ins(cpp, table.concat(values, ", "))
	ins(cpp, "},\n")
end
ins(cpp, "};\n\n\n\n\n")

-- Write C++ code to file:
local cppfile = assert(io.open("src/BlockColors.cpp", "w"))
cppfile:write(table.concat(cpp))
cppfile:close()




